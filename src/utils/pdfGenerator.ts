
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

// Extend the jsPDF types for the autotable plugin
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
    previousAutoTable?: {
      finalY: number;
    };
  }
}

export const generatePDF = (data: any, fileName: string = 'download.pdf') => {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(18);
  doc.text('TipTop Property Report', 14, 22);
  
  // Add date
  doc.setFontSize(11);
  doc.setTextColor(100);
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, 14, 30);
  
  // Convert data to table format
  if (data.properties) {
    doc.setFontSize(14);
    doc.text('Properties', 14, 45);
    
    doc.autoTable({
      startY: 50,
      head: [['Address', 'Type', 'Status', 'Revenue']],
      body: data.properties.map((prop: any) => [
        prop.address,
        prop.type,
        prop.status,
        `$${prop.revenue}`
      ]),
    });
  }
  
  if (data.earnings) {
    const startY = doc.previousAutoTable?.finalY || 50;
    doc.setFontSize(14);
    doc.text('Affiliate Earnings', 14, startY + 15);
    
    doc.autoTable({
      startY: startY + 20,
      head: [['Service', 'Earnings', 'Last Updated']],
      body: data.earnings.map((item: any) => [
        item.service,
        `$${item.earnings}`,
        new Date(item.updated_at).toLocaleDateString()
      ]),
    });
  }
  
  // Save the PDF
  doc.save(fileName);
};

// Helper function specifically for property reports
export const generatePropertyReportPDF = (
  propertyAddress: string, 
  totalEarnings: number,
  services: Array<{ id: string; title: string; description: string; earnings: string }>,
  ownerName: string
) => {
  const doc = new jsPDF();
  
  // Add TipTop branding
  doc.setFontSize(24);
  doc.setTextColor(128, 0, 128); // Purple color
  doc.text('TipTop', 14, 20);
  
  doc.setFontSize(16);
  doc.setTextColor(60);
  doc.text('Property Monetization Report', 60, 20);
  
  // Add property details
  doc.setFontSize(14);
  doc.setTextColor(60);
  doc.text('Property Details', 14, 35);
  
  doc.setFontSize(12);
  doc.text(`Address: ${propertyAddress}`, 14, 45);
  doc.text(`Owner: ${ownerName}`, 14, 52);
  doc.text(`Report Date: ${new Date().toLocaleDateString()}`, 14, 59);
  
  // Add earnings summary
  doc.setFontSize(14);
  doc.setTextColor(60);
  doc.text('Earnings Summary', 14, 75);
  
  doc.setFontSize(18);
  doc.setTextColor(0, 128, 0); // Green for money
  doc.text(`Estimated Monthly Revenue: $${totalEarnings}`, 14, 85);
  
  // Add services breakdown
  doc.setFontSize(14);
  doc.setTextColor(60);
  doc.text('Revenue Streams', 14, 100);
  
  // Create a table for the services
  const tableData = services.map(service => [
    service.title,
    service.earnings,
    service.description
  ]);
  
  doc.autoTable({
    startY: 105,
    head: [['Service', 'Est. Monthly', 'Description']],
    body: tableData,
    theme: 'grid',
    headStyles: { fillColor: [128, 0, 128] },
    styles: { overflow: 'linebreak' },
    columnStyles: {
      0: { cellWidth: 50 },
      1: { cellWidth: 30 },
      2: { cellWidth: 'auto' }
    }
  });
  
  // Add footer with TipTop info
  const finalY = doc.previousAutoTable?.finalY || 200;
  
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('Generated by TipTop Property Monetization Platform', 14, finalY + 20);
  doc.text('Visit tiptop.com to learn more about monetizing your property assets', 14, finalY + 25);
  
  // Return the PDF blob object
  return doc.output('blob');
};
